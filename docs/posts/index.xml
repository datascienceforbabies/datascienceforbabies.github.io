<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Data Science for Babies</title>
        <link>http://datascienceforbabies.com/posts/</link>
        <description>Recent content in Posts on Data Science for Babies</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 17 Nov 2022 16:08:51 -0500</lastBuildDate>
        <atom:link href="http://datascienceforbabies.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Basics of Slicing Rows with Pandas</title>
            <link>http://datascienceforbabies.com/posts/basics-of-slicing/</link>
            <pubDate>Thu, 17 Nov 2022 16:08:51 -0500</pubDate>
            
            <guid>http://datascienceforbabies.com/posts/basics-of-slicing/</guid>
            <description>Data scientists need to have a great understanding of slicing into dataframes because when working with large amounts of data, it&amp;rsquo;s important to know how to select certain rows, columns, or cells. For example, when working with a big dataset of real estate sales in the last year, you might want to select only the first 100 rows, or only a few particular columns. This article will explain the basic syntax of slicing rows.</description>
            <content type="html"><![CDATA[<p>Data scientists need to have a great understanding of slicing into dataframes because when working with large amounts of data, it&rsquo;s important to know how to select certain rows, columns, or cells. For example, when working with a big dataset of real estate sales in the last year, you might want to select only the first 100 rows, or only a few particular columns. This article will explain the basic syntax of slicing rows. To learn how to slice rows and columns at the same time, see my next article called &lsquo;Basics of Slicing Columns with Pandas.&rsquo; To follow along with my code, you can copy and paste my code into the browser editor at the bottom of this page, or run on your machine.</p>
<p>For the purposes of this article, I&rsquo;ll be demonstrating slicing with the pandas dataframe built with the following code. Note that you will need to install pandas as pd for this code to run correctly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>data <span style="color:#f92672">=</span> [[<span style="color:#e6db74">&#39;red&#39;</span>, <span style="color:#ae81ff">22</span>, <span style="color:#e6db74">&#39;round&#39;</span>], [<span style="color:#e6db74">&#39;red&#39;</span>, <span style="color:#ae81ff">2</span>, <span style="color:#e6db74">&#39;square&#39;</span>], [<span style="color:#e6db74">&#39;green&#39;</span>, <span style="color:#ae81ff">5</span>, <span style="color:#e6db74">&#39;round&#39;</span>], [<span style="color:#e6db74">&#39;green&#39;</span>, <span style="color:#ae81ff">31</span>, <span style="color:#e6db74">&#39;square&#39;</span>], [<span style="color:#e6db74">&#39;blue&#39;</span>, <span style="color:#ae81ff">14</span>, <span style="color:#e6db74">&#39;round&#39;</span>], [<span style="color:#e6db74">&#39;blue&#39;</span>, <span style="color:#ae81ff">12</span>, <span style="color:#e6db74">&#39;square&#39;</span>]]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>DataFrame(data, columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Color&#39;</span>, <span style="color:#e6db74">&#39;Number&#39;</span>, <span style="color:#e6db74">&#39;Shape&#39;</span>])
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df</span></span></code></pre></div>
<p>The easiest way to take a slice of a dataframe is with brackets, []. This action selects rows of a dataframe based on what you put in the brackets. To select a single row, say the row at index value 3, you would run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[<span style="color:#ae81ff">3</span>:<span style="color:#ae81ff">4</span>]</span></span></code></pre></div>
<p>Notice that to display one row, I had to enter two values: 3 and 4, separated by a colon. Slicing typically requires 2 values. The first value, before the colon, represents the beginning index of the slice and is inclusive. The second value, after the colon, represents the ending index of the slice and is exclusive. So this slice only includes row 3.</p>
<p>A slice that would include multiple rows with the same kind of syntax could be called with the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[<span style="color:#ae81ff">2</span>:<span style="color:#ae81ff">5</span>]</span></span></code></pre></div>
<p>This would return rows 2, 3, and 4.</p>
<p>If you want to select all rows up until a certain index, specify the exclusive ending index, but don&rsquo;t put anything for the beginning index, like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[:<span style="color:#ae81ff">3</span>]</span></span></code></pre></div>
<p>This will return rows 0, 1, and 2. To select all rows beginning at a certain index and all rows following, just do the opposite - specify the beginning index, but not the ending index:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[<span style="color:#ae81ff">3</span>:]</span></span></code></pre></div>
<p>This will return rows 3, 4, and 5.</p>
<p>There is a third dimension to slicing, which can select rows according to a specific pattern within the beginning and ending indices. To do this, add a third number to the slicing command, like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[<span style="color:#ae81ff">1</span>:<span style="color:#ae81ff">5</span>:<span style="color:#ae81ff">2</span>]</span></span></code></pre></div>
<p>Without the added 2, we would expect rows 1, 2, 3, and 4 to be selected. However, now that we&rsquo;ve added the 2, the slicing command will select every other row within our specified range - that is, every 2 rows. So instead, we see rows 1 and 3. Here&rsquo;s another example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[<span style="color:#ae81ff">0</span>:<span style="color:#ae81ff">6</span>:<span style="color:#ae81ff">3</span>]</span></span></code></pre></div>
<p>The beginning and ending indices alone would actually return the whole dataframe. But with the added 3, the command selects every 3 rows, so this command returns rows 0 and 3.</p>
<p>If we want to take every 3rd row from an entire dataframe, we don&rsquo;t have to specify the beginning and ending indices. Instead, we can run the following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[::<span style="color:#ae81ff">3</span>]</span></span></code></pre></div>
<p>This will give us what we want and is especially helpful when we&rsquo;re dealing with a bigger dataframe.</p>
<p>With all of these commands, if we use negative numbers the code runs similarly, with one catch: now, it considers the last row to be at index 0, and works backwards. It will return rows in reverse order, too. For example, if I slice the entire dataframe with the repeating pattern set to -1 (essentially, selecting all rows beginning with the end of the dataframe) I will return the dataframe with its rows in reverse order. The command would look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>df[::<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]</span></span></code></pre></div>
<p>See &lsquo;Basics of Slicing Columns with Pandas&rsquo; for taking slices that will specify rows and columns simultaneously.</p>
<p>Source: <a href="https://pandas.pydata.org/docs/user_guide/indexing.html">https://pandas.pydata.org/docs/user_guide/indexing.html</a></p>
<script defer src="https://pyscript.net/alpha/pyscript.js"></script>
<link rel="stylesheet" href="https://raw.githubusercontent.com/Cat-Computing-Universe/PyLab/main/demo/demo.css" />
<script src="https://code.jquery.com/jquery-3.5.0.js"></script>
<py-env>
  - numpy
  - pandas
</py-env>
<b>pyscript REPL (numpy and pandas are installed)</b>
<br>
<div>
  <div>
    <py-repl id="my-repl" auto-generate="true" std-out="output" std-err="output">
import numpy as np
import pandas as pd
    </py-repl>
  </div>
  <div style="justify-content: right;display: flex;align-items: right;">
    <button class="button_reset" type="button">Clear Output</button>
  </div>
  <b>Output:</b>
  <div style="justify-content: center;display: flex;align-items: center;">
    <div id="output" style="width: 100%;margin: 2rem;"></div>
  </div>
  <script src="https://raw.githubusercontent.com/Cat-Computing-Universe/PyLab/main/demo/demo.js"></script>
</div>]]></content>
        </item>
        
        <item>
            <title>Standard Error v. Standard Deviation</title>
            <link>http://datascienceforbabies.com/posts/standard-error-v-standard-deviation/</link>
            <pubDate>Wed, 16 Nov 2022 13:03:20 -0500</pubDate>
            
            <guid>http://datascienceforbabies.com/posts/standard-error-v-standard-deviation/</guid>
            <description>What&amp;rsquo;s the difference between standard error and standard deviation? Every new data scientist asks this question of themselves. Honestly, the difference is nuanced, and standard error is a form of standard deviation.
Standard Deviation is a measure of the variability within a sample - this can be a sample of a population or the entire population itself. A lower standard deviation indicates that values in a distribution tend closer toward the mean of that distribution, while high standard deviation suggests that values are dispersed more greatly from the mean.</description>
            <content type="html"><![CDATA[<p>What&rsquo;s the difference between standard error and standard deviation? Every new data scientist asks this question of themselves. Honestly, the difference is nuanced, and standard error is a form of standard deviation.</p>
<p>Standard Deviation is a measure of the variability within a sample - this can be a sample of a population or the entire population itself. A lower standard deviation indicates that values in a distribution tend closer toward the mean of that distribution, while high standard deviation suggests that values are dispersed more greatly from the mean.</p>
<p>Standard Error is used in reference to variability across sample distributions. If you were to draw infinite repeated samples from the original population and take the mean of each sample, the standard deviation on the distribution of those sample means combined is the standard error. We compute the standard error as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>standard_deviation/sqrt(sample_size)
</span></span></code></pre></div><p>The standard error on an estimation reflects how greatly that estimate varies under repeated sampling, which is why it is often used in the computation of confidence intervals. That being said, the 95% confidence interval on an estimate is calculated by:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>confidence_interval = [estimate - 2*standard_error(estimate), estimate + 2*standard_error(estimate)]
</span></span></code></pre></div><p>Most frequently, data scientists retrieve the value of standard_error(estimate) from the model output.</p>
<p>By Eve Schoenrock</p>
]]></content>
        </item>
        
        <item>
            <title>Buzzwords</title>
            <link>http://datascienceforbabies.com/posts/buzzwords/</link>
            <pubDate>Sun, 13 Nov 2022 11:39:45 -0500</pubDate>
            
            <guid>http://datascienceforbabies.com/posts/buzzwords/</guid>
            <description>In this article, we&amp;rsquo;ll keep a running list of data science buzzwords and jargon that we&amp;rsquo;ll define in simple terms.
Distribution
Algorithm
AI
Machine Learning
Regression
Classification
Optimization</description>
            <content type="html"><![CDATA[<p>In this article, we&rsquo;ll keep a running list of data science buzzwords and jargon that we&rsquo;ll define in simple terms.</p>
<p>Distribution</p>
<p>Algorithm</p>
<p>AI</p>
<p>Machine Learning</p>
<p>Regression</p>
<p>Classification</p>
<p>Optimization</p>
]]></content>
        </item>
        
        <item>
            <title>Examplepost</title>
            <link>http://datascienceforbabies.com/posts/examplepost/</link>
            <pubDate>Fri, 11 Nov 2022 12:10:00 -0500</pubDate>
            
            <guid>http://datascienceforbabies.com/posts/examplepost/</guid>
            <description>Hello! Here is the first ever post on datascienceforbabies.com!!
Above is a test of inserting an image.
# break dataframes into test and training - this way the test data is completely new (80/20 split) aqu_train = aqu.sample(frac=0.8, random_state=25) aqu_test = aqu.drop(aqu_train.index) bel_train = bel.sample(frac=0.8, random_state=25) bel_test = bel.drop(bel_train.index) sar_train = sar.sample(frac=.8, random_state=25) sar_test = sar.drop(sar_train.index) Above is a test of inserting code.
- numpypyscript REPL (numpy is installed)import numpy as npprint(&#34;</description>
            <content type="html"><![CDATA[<p>Hello! Here is the first ever post on datascienceforbabies.com!!</p>
<p><img src="/pexels-photo-268533.webp" alt="Yellow Duck" title="Yellow Duck"></p>
<p>Above is a test of inserting an image.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>  # break dataframes into test and training - this way the test data is completely new (80/20 split)
</span></span><span style="display:flex;"><span>  aqu_train =  aqu.sample(frac=0.8, random_state=25)
</span></span><span style="display:flex;"><span>  aqu_test = aqu.drop(aqu_train.index)
</span></span><span style="display:flex;"><span>  bel_train = bel.sample(frac=0.8, random_state=25)
</span></span><span style="display:flex;"><span>  bel_test = bel.drop(bel_train.index)
</span></span><span style="display:flex;"><span>  sar_train = sar.sample(frac=.8, random_state=25)
</span></span><span style="display:flex;"><span>  sar_test = sar.drop(sar_train.index)
</span></span></code></pre></div><p>Above is a test of inserting code.</p>
<script defer src="https://pyscript.net/alpha/pyscript.js"></script>
<link rel="stylesheet" href="https://raw.githubusercontent.com/Cat-Computing-Universe/PyLab/main/demo/demo.css" />
<script src="https://code.jquery.com/jquery-3.5.0.js"></script>
<py-env>
  - numpy
</py-env>
<b>pyscript REPL (numpy is installed)</b>
<br>
<div>
  <div>
    <py-repl id="my-repl" auto-generate="true" std-out="output" std-err="output">
import numpy as np
print("Hello, world!")
    </py-repl>
  </div>
  <div style="justify-content: right;display: flex;align-items: right;">
    <button class="button_reset" type="button">Clear Output</button>
  </div>
  <b>Output:</b>
  <div style="justify-content: center;display: flex;align-items: center;">
    <div id="output" style="width: 100%;margin: 2rem;"></div>
  </div>
  <script src="https://raw.githubusercontent.com/Cat-Computing-Universe/PyLab/main/demo/demo.js"></script>
</div>
<p>Above is a test of inserting runnable code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>print(<span style="color:#e6db74">&#34;Hello, world!&#34;</span>)</span></span></code></pre></div>
<p>Above is a test of inserting highlighted code.</p>
]]></content>
        </item>
        
    </channel>
</rss>
